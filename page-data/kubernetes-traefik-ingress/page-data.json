{"componentChunkName":"component---src-templates-post-jsx","path":"/kubernetes-traefik-ingress","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"date\": \"2019-02-01\",\n  \"title\": \"Kubernetes Traefik Ingress\",\n  \"categories\": [\"LINUX\", \"Docker\", \"Kubernetes\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"span\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"gatsby-resp-image-wrapper\",\n    \"style\": {\n      \"position\": \"relative\",\n      \"display\": \"block\",\n      \"marginLeft\": \"auto\",\n      \"marginRight\": \"auto\",\n      \"maxWidth\": \"1024px\"\n    }\n  }), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"gatsby-resp-image-background-image\",\n    \"style\": {\n      \"paddingBottom\": \"51.59171298635674%\",\n      \"position\": \"relative\",\n      \"bottom\": \"0\",\n      \"left\": \"0\",\n      \"backgroundSize\": \"cover\",\n      \"display\": \"block\"\n    }\n  })), \"\\n    \", mdx(\"picture\", {\n    parentName: \"span\"\n  }, \"\\n        \", mdx(\"source\", _extends({\n    parentName: \"picture\"\n  }, {\n    \"srcSet\": [\"/static/9dd39add6898cd57e9db40d0696a7fe4/8d3d1/photo-34445481222_d3b67160da_o.webp 256w\", \"/static/9dd39add6898cd57e9db40d0696a7fe4/354cf/photo-34445481222_d3b67160da_o.webp 512w\", \"/static/9dd39add6898cd57e9db40d0696a7fe4/44907/photo-34445481222_d3b67160da_o.webp 1024w\", \"/static/9dd39add6898cd57e9db40d0696a7fe4/a8642/photo-34445481222_d3b67160da_o.webp 1536w\", \"/static/9dd39add6898cd57e9db40d0696a7fe4/2cd17/photo-34445481222_d3b67160da_o.webp 1979w\"],\n    \"sizes\": \"(max-width: 1024px) 100vw, 1024px\",\n    \"type\": \"image/webp\"\n  })), \"\\n        \", mdx(\"source\", _extends({\n    parentName: \"picture\"\n  }, {\n    \"srcSet\": [\"/static/9dd39add6898cd57e9db40d0696a7fe4/8f7a7/photo-34445481222_d3b67160da_o.jpg 256w\", \"/static/9dd39add6898cd57e9db40d0696a7fe4/9bced/photo-34445481222_d3b67160da_o.jpg 512w\", \"/static/9dd39add6898cd57e9db40d0696a7fe4/7c71a/photo-34445481222_d3b67160da_o.jpg 1024w\", \"/static/9dd39add6898cd57e9db40d0696a7fe4/ce273/photo-34445481222_d3b67160da_o.jpg 1536w\", \"/static/9dd39add6898cd57e9db40d0696a7fe4/95d0f/photo-34445481222_d3b67160da_o.jpg 1979w\"],\n    \"sizes\": \"(max-width: 1024px) 100vw, 1024px\",\n    \"type\": \"image/jpeg\"\n  })), \"\\n        \", mdx(\"img\", _extends({\n    parentName: \"picture\"\n  }, {\n    \"className\": \"gatsby-resp-image-image\",\n    \"style\": {\n      \"width\": \"100%\",\n      \"height\": \"100%\",\n      \"margin\": \"0\",\n      \"verticalAlign\": \"middle\",\n      \"position\": \"absolute\",\n      \"top\": \"0\",\n      \"left\": \"0\",\n      \"boxShadow\": \"inset 0px 0px 0px 400px white\"\n    },\n    \"src\": \"/static/9dd39add6898cd57e9db40d0696a7fe4/7c71a/photo-34445481222_d3b67160da_o.jpg\",\n    \"alt\": \"Tanna, Vanuatu\",\n    \"title\": \"\"\n  })), \"\\n      \"), \"\\n  \")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#getting-started-with-the-traefik-reverse-proxy\"\n  }), \"Getting Started with the Traefik Reverse Proxy\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#prerequisites\"\n  }), \"Prerequisites\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#deploy-traefik-using-a-deployment-or-daemonset\"\n  }), \"Deploy Traefik using a Deployment or DaemonSet\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#submitting-an-ingress-to-the-cluster\"\n  }), \"Submitting an Ingress to the Cluster\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#path-based-routing\"\n  }), \"Path-based Routing\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#user-authentication\"\n  }), \"User Authentication\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#creating-the-secret\"\n  }), \"Creating the Secret\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#add-a-tls-certificate-to-the-ingress\"\n  }), \"Add a TLS Certificate to the Ingress\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#name-based-routing\"\n  }), \"Name-based Routing\"))), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"This article is still WIP - better check out the \", mdx(\"a\", _extends({\n    parentName: \"strong\"\n  }, {\n    \"href\": \"/kubernetes-nginx-ingress/\"\n  }), \"NGINX Ingress\"), \" instead...\")), mdx(\"p\", null, \"Before we explored the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/kubernetes-nginx-ingress/\"\n  }), \"NGINX Ingress\"), \" to route traffic onto Services inside our Kubernetes Cluster. But there are a couple of options that we can choose from here:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/kubernetes/ingress-nginx/blob/master/README.md\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"Nginx\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/heptio/contour\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"Contour\"), \" \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://www.haproxy.com/blog/haproxy_ingress_controller_for_kubernetes/\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"HAProxy\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://appscode.com/products/voyager/\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"Voyager\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://docs.traefik.io\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"Traefik\"))), mdx(\"h2\", {\n    \"id\": \"getting-started-with-the-traefik-reverse-proxy\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#getting-started-with-the-traefik-reverse-proxy\",\n    \"aria-label\": \"getting started with the traefik reverse proxy permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Getting Started with the Traefik Reverse Proxy\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/containous/traefik\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"Traefik\"), \" is a modern HTTP reverse proxy and load balancer that makes deploying microservices easy. Traefik integrates with your existing infrastructure components and configures itself automatically and dynamically. Pointing Traefik at your orchestrator - e.g. \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/creating-a-kubernetes-cluster/\"\n  }), \"Kubernetes\"), \" should be the only configuration step you need.\"), mdx(\"p\", null, \"Traditional reverse-proxies require that you configure each route that will connect paths and subdomains to each microservice. Traefik listens to your service registry/orchestrator API (\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://docs.traefik.io/configuration/backends/etcd/\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"etcd\"), \" / \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://docs.traefik.io/configuration/backends/kubernetes/\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"Kubernetes\"), \") and instantly generates the routes so your microservices are connected to the outside world -- without further intervention from your part.\"), mdx(\"p\", null, \"The example configuration files that we are working with are available in the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/containous/traefik/tree/v1.7/examples/k8s\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"Traefik Github repository\"), \".\"), mdx(\"h2\", {\n    \"id\": \"prerequisites\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#prerequisites\",\n    \"aria-label\": \"prerequisites permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Prerequisites\"), mdx(\"p\", null, \"Kubernetes introduces \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://kubernetes.io/docs/reference/access-authn-authz/rbac/\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"Role Based Access Control (RBAC)\"), \" in 1.6+ to allow fine-grained control of Kubernetes resources and API.\"), mdx(\"p\", null, \"If your cluster is configured with RBAC, you will need to authorize Traefik to use the Kubernetes API. There are two ways to set up the proper permission: Via \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"namespace-specific RoleBindings\"), \" or a single, global \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ClusterRoleBinding\"), \".\"), mdx(\"p\", null, \"RoleBindings per namespace enable to restrict granted permissions to the very namespaces only that Traefik is watching over, thereby following the least-privileges principle. This is the preferred approach if Traefik is not supposed to watch all namespaces, and the set of namespaces does not change dynamically. Otherwise, a single \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ClusterRoleBinding\"), \" must be employed.\"), mdx(\"p\", null, \"But for the sake of simplicity, this guide will use a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ClusterRoleBinding\"), \" with the following \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/containous/traefik/blob/v1.7/examples/k8s/traefik-rbac.yaml\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"YAML file\"), \":\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"traefik-rbac.yaml\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), \"---\\nkind: ClusterRole\\napiVersion: rbac.authorization.k8s.io/v1beta1\\nmetadata:\\n  name: traefik-ingress-controller\\nrules:\\n  - apiGroups:\\n      - \\\"\\\"\\n    resources:\\n      - services\\n      - endpoints\\n      - secrets\\n    verbs:\\n      - get\\n      - list\\n      - watch\\n  - apiGroups:\\n      - extensions\\n    resources:\\n      - ingresses\\n    verbs:\\n      - get\\n      - list\\n      - watch\\n  - apiGroups:\\n    - extensions\\n    resources:\\n    - ingresses/status\\n    verbs:\\n    - update\\n---\\nkind: ClusterRoleBinding\\napiVersion: rbac.authorization.k8s.io/v1beta1\\nmetadata:\\n  name: traefik-ingress-controller\\nroleRef:\\n  apiGroup: rbac.authorization.k8s.io\\n  kind: ClusterRole\\n  name: traefik-ingress-controller\\nsubjects:\\n- kind: ServiceAccount\\n  name: traefik-ingress-controller\\n  namespace: monitoring\\n\")), mdx(\"p\", null, mdx(\"span\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"gatsby-resp-image-wrapper\",\n    \"style\": {\n      \"position\": \"relative\",\n      \"display\": \"block\",\n      \"marginLeft\": \"auto\",\n      \"marginRight\": \"auto\",\n      \"maxWidth\": \"805px\"\n    }\n  }), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"gatsby-resp-image-background-image\",\n    \"style\": {\n      \"paddingBottom\": \"80.37267080745342%\",\n      \"position\": \"relative\",\n      \"bottom\": \"0\",\n      \"left\": \"0\",\n      \"backgroundSize\": \"cover\",\n      \"display\": \"block\"\n    }\n  })), \"\\n    \", mdx(\"picture\", {\n    parentName: \"span\"\n  }, \"\\n        \", mdx(\"source\", _extends({\n    parentName: \"picture\"\n  }, {\n    \"srcSet\": [\"/static/fb914a044886b221e83b67fab8a559fe/8d3d1/kubernetes-traefik-ingress_01.webp 256w\", \"/static/fb914a044886b221e83b67fab8a559fe/354cf/kubernetes-traefik-ingress_01.webp 512w\", \"/static/fb914a044886b221e83b67fab8a559fe/bdf31/kubernetes-traefik-ingress_01.webp 805w\"],\n    \"sizes\": \"(max-width: 805px) 100vw, 805px\",\n    \"type\": \"image/webp\"\n  })), \"\\n        \", mdx(\"source\", _extends({\n    parentName: \"picture\"\n  }, {\n    \"srcSet\": [\"/static/fb914a044886b221e83b67fab8a559fe/b1806/kubernetes-traefik-ingress_01.png 256w\", \"/static/fb914a044886b221e83b67fab8a559fe/7572d/kubernetes-traefik-ingress_01.png 512w\", \"/static/fb914a044886b221e83b67fab8a559fe/6075d/kubernetes-traefik-ingress_01.png 805w\"],\n    \"sizes\": \"(max-width: 805px) 100vw, 805px\",\n    \"type\": \"image/png\"\n  })), \"\\n        \", mdx(\"img\", _extends({\n    parentName: \"picture\"\n  }, {\n    \"className\": \"gatsby-resp-image-image\",\n    \"style\": {\n      \"width\": \"100%\",\n      \"height\": \"100%\",\n      \"margin\": \"0\",\n      \"verticalAlign\": \"middle\",\n      \"position\": \"absolute\",\n      \"top\": \"0\",\n      \"left\": \"0\",\n      \"boxShadow\": \"inset 0px 0px 0px 400px white\"\n    },\n    \"src\": \"/static/fb914a044886b221e83b67fab8a559fe/6075d/kubernetes-traefik-ingress_01.png\",\n    \"alt\": \"Traefik Ingress for your Kubernetes Cluster\",\n    \"title\": \"\"\n  })), \"\\n      \"), \"\\n  \")), mdx(\"p\", null, \"Apply the configuration with the following Kubernete command (change the URL to the local path, if you decided to store the file above locally):\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"kubectl apply -f https://raw.githubusercontent.com/containous/traefik/v1.7/examples/k8s/traefik-rbac.yaml\\n\")), mdx(\"h2\", {\n    \"id\": \"deploy-traefik-using-a-deployment-or-daemonset\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#deploy-traefik-using-a-deployment-or-daemonset\",\n    \"aria-label\": \"deploy traefik using a deployment or daemonset permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Deploy Traefik using a Deployment or DaemonSet\"), mdx(\"p\", null, \"It is possible to use Traefik with a \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://kubernetes.io/docs/concepts/workloads/controllers/deployment/\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"Deployment\"), \" or a \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"DaemonSet\"), \" object, whereas both options have their own pros and cons:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The scalability can be much better when using a Deployment, because you will have a Single-Pod-per-Node model when using a DaemonSet, whereas you may need less replicas based on your environment when using a Deployment.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"DaemonSets automatically scale to new nodes, when the nodes join the cluster, whereas Deployment pods are only scheduled on new nodes if required.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"DaemonSets ensure that only one replica of pods run on any single node. Deployments require affinity settings if you want to ensure that two pods don't end up on the same node.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"DaemonSets can be run with the \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"NET\", \"_\", \"BIND\", \"_\", \"SERVICE\"), \" capability, which will allow it to bind to port 80/443/etc on each host. This will allow bypassing the kube-proxy, and reduce traffic hops. Note that this is against the Kubernetes \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://kubernetes.io/docs/concepts/configuration/overview/#services\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"Best Practices Guidelines\"), \", and raises the potential for scheduling/scaling issues. Despite potential issues, this remains the choice for most ingress controllers.\")), mdx(\"p\", null, \"I am going to use the Deployment here - but the configuration file for the DemonSet does not look s different and can be \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/containous/traefik/tree/v1.7/examples/k8s/traefik-ds.yaml\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"downloaded here\"), \".\"), mdx(\"p\", null, \"The Deployment objects looks like this (see below) and can be \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/containous/traefik/tree/v1.7/examples/k8s/traefik-deployment.yaml\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"downloaded here\"), \":\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"traefik-deployment.yaml\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), \"---\\napiVersion: v1\\nkind: ServiceAccount\\nmetadata:\\n  name: traefik-ingress-controller\\n  namespace: monitoring\\n  \\n---\\nkind: Deployment\\napiVersion: extensions/v1beta1\\nmetadata:\\n  name: traefik-ingress-controller\\n  namespace: monitoring\\n  labels:\\n    k8s-app: traefik-ingress-lb\\nspec:\\n  replicas: 1\\n  selector:\\n    matchLabels:\\n      k8s-app: traefik-ingress-lb\\n  template:\\n    metadata:\\n      labels:\\n        k8s-app: traefik-ingress-lb\\n        name: traefik-ingress-lb\\n    spec:\\n      serviceAccountName: traefik-ingress-controller\\n      terminationGracePeriodSeconds: 60\\n      containers:\\n      - image: traefik\\n        name: traefik-ingress-lb\\n        ports:\\n        - name: http\\n          containerPort: 80\\n          hostPort: 8080\\n        - name: admin\\n          containerPort: 8080\\n        args:\\n        - --api\\n        - --kubernetes\\n        - --logLevel=INFO\\n        - --defaultentrypoints=http\\n        - --entrypoints=Name:http Address::80\\n        \\n---\\nkind: Service\\napiVersion: v1\\nmetadata:\\n  name: traefik-ingress-service\\n  namespace: monitoring\\nspec:\\n  selector:\\n    k8s-app: traefik-ingress-lb\\n  ports:\\n    - protocol: TCP\\n      port: 80\\n      name: http\\n    - protocol: TCP\\n      port: 8080\\n      name: admin\\n  externalIPs:\\n    - 172.56.4.112\\n\")), mdx(\"p\", null, \"To deploy Traefik to your cluster start by applying the YAML files with kubectl:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"kubectl apply -f https://raw.githubusercontent.com/containous/traefik/v1.7/examples/k8s/traefik-deployment.yaml\\n\")), mdx(\"p\", null, \"You can verify that the Ingress pod was started with:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"kubectl --namespace=kube-system get pods\\n\")), mdx(\"p\", null, mdx(\"span\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"gatsby-resp-image-wrapper\",\n    \"style\": {\n      \"position\": \"relative\",\n      \"display\": \"block\",\n      \"marginLeft\": \"auto\",\n      \"marginRight\": \"auto\",\n      \"maxWidth\": \"804px\"\n    }\n  }), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"gatsby-resp-image-background-image\",\n    \"style\": {\n      \"paddingBottom\": \"28.109452736318406%\",\n      \"position\": \"relative\",\n      \"bottom\": \"0\",\n      \"left\": \"0\",\n      \"backgroundSize\": \"cover\",\n      \"display\": \"block\"\n    }\n  })), \"\\n    \", mdx(\"picture\", {\n    parentName: \"span\"\n  }, \"\\n        \", mdx(\"source\", _extends({\n    parentName: \"picture\"\n  }, {\n    \"srcSet\": [\"/static/16198b2e27372a03b36151620f94e00d/8d3d1/kubernetes-traefik-ingress_02.webp 256w\", \"/static/16198b2e27372a03b36151620f94e00d/354cf/kubernetes-traefik-ingress_02.webp 512w\", \"/static/16198b2e27372a03b36151620f94e00d/d7f04/kubernetes-traefik-ingress_02.webp 804w\"],\n    \"sizes\": \"(max-width: 804px) 100vw, 804px\",\n    \"type\": \"image/webp\"\n  })), \"\\n        \", mdx(\"source\", _extends({\n    parentName: \"picture\"\n  }, {\n    \"srcSet\": [\"/static/16198b2e27372a03b36151620f94e00d/b1806/kubernetes-traefik-ingress_02.png 256w\", \"/static/16198b2e27372a03b36151620f94e00d/7572d/kubernetes-traefik-ingress_02.png 512w\", \"/static/16198b2e27372a03b36151620f94e00d/2c8f1/kubernetes-traefik-ingress_02.png 804w\"],\n    \"sizes\": \"(max-width: 804px) 100vw, 804px\",\n    \"type\": \"image/png\"\n  })), \"\\n        \", mdx(\"img\", _extends({\n    parentName: \"picture\"\n  }, {\n    \"className\": \"gatsby-resp-image-image\",\n    \"style\": {\n      \"width\": \"100%\",\n      \"height\": \"100%\",\n      \"margin\": \"0\",\n      \"verticalAlign\": \"middle\",\n      \"position\": \"absolute\",\n      \"top\": \"0\",\n      \"left\": \"0\",\n      \"boxShadow\": \"inset 0px 0px 0px 400px white\"\n    },\n    \"src\": \"/static/16198b2e27372a03b36151620f94e00d/2c8f1/kubernetes-traefik-ingress_02.png\",\n    \"alt\": \"Traefik Ingress for your Kubernetes Cluster\",\n    \"title\": \"\"\n  })), \"\\n      \"), \"\\n  \")), mdx(\"h2\", {\n    \"id\": \"submitting-an-ingress-to-the-cluster\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#submitting-an-ingress-to-the-cluster\",\n    \"aria-label\": \"submitting an ingress to the cluster permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Submitting an Ingress to the Cluster\"), mdx(\"p\", null, \"Lets start by creating a Service and an Ingress that will expose the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/containous/traefik#web-ui\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"Traefik Web UI\"), \" (the configuration file can be \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/containous/traefik/tree/v1.7/examples/k8s/ui.yaml\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"downloaded here\"), \"):\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ui.yaml\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), \"---\\napiVersion: v1\\nkind: Service\\nmetadata:\\n  name: traefik-web-ui\\n  namespace: monitoring\\nspec:\\n  selector:\\n    k8s-app: traefik-ingress-lb\\n  ports:\\n  - name: http\\n    port: 80\\n    targetPort: 8080\\n---\\napiVersion: extensions/v1beta1\\nkind: Ingress\\nmetadata:\\n  name: traefik-web-ui\\n  namespace: monitoring\\nspec:\\n  rules:\\n    http:\\n      paths:\\n      - path: /\\n        backend:\\n          serviceName: traefik-web-ui\\n          servicePort: http\\n\")), mdx(\"p\", null, \"Apply the service to your cluster with:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"kubectl apply -f https://raw.githubusercontent.com/containous/traefik/v1.7/examples/k8s/ui.yaml\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"This setup assigns a host domain \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"traefik-ui.minikube\"), \" to your cluster ingress you can add an entry in our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/etc/hosts\"), \" file to route \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"traefik-ui.minikube\"), \" to our cluster. In production you would want to add your real DNS entries here!\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/kubernetes-nginx-ingress/#creating-the-load-balancing-service\"\n  }), \"As seen before\"), \", we can add the Kubernetes Master WAN IP address, e.g. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"externalIPs: 172.56.4.112\"), \", to the service configuration to be able to access the service over the internet\")), mdx(\"p\", null, \"Adding these two modifications, we end up with a YAML file looking like this:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), \"---\\n---\\napiVersion: v1\\nkind: Service\\nmetadata:\\n  name: traefik-web-ui\\n  namespace: monitoring\\nspec:\\n  selector:\\n    k8s-app: traefik-ingress-lb\\n  ports:\\n  - name: http\\n    port: 80\\n    targetPort: 8080\\n  externalIPs:\\n    - 172.56.4.112\\n---\\napiVersion: extensions/v1beta1\\nkind: Ingress\\nmetadata:\\n  name: traefik-web-ui\\n  namespace: monitoring\\nspec:\\n  rules:\\n  - host: traefik-ui.minikube\\n    http:\\n      paths:\\n      - path: /\\n        backend:\\n          serviceName: traefik-web-ui\\n          servicePort: http\\n\")), mdx(\"p\", null, \"When you access the URL with your browser, you should now be greeted by the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/containous/traefik#web-ui\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"Traefik Dashboard\"), \":\"), mdx(\"p\", null, mdx(\"span\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"gatsby-resp-image-wrapper\",\n    \"style\": {\n      \"position\": \"relative\",\n      \"display\": \"block\",\n      \"marginLeft\": \"auto\",\n      \"marginRight\": \"auto\",\n      \"maxWidth\": \"796px\"\n    }\n  }), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"gatsby-resp-image-background-image\",\n    \"style\": {\n      \"paddingBottom\": \"95.60301507537689%\",\n      \"position\": \"relative\",\n      \"bottom\": \"0\",\n      \"left\": \"0\",\n      \"backgroundSize\": \"cover\",\n      \"display\": \"block\"\n    }\n  })), \"\\n    \", mdx(\"picture\", {\n    parentName: \"span\"\n  }, \"\\n        \", mdx(\"source\", _extends({\n    parentName: \"picture\"\n  }, {\n    \"srcSet\": [\"/static/1f0e0afc788a4c4579cf54432f490479/8d3d1/kubernetes-traefik-ingress_03.webp 256w\", \"/static/1f0e0afc788a4c4579cf54432f490479/354cf/kubernetes-traefik-ingress_03.webp 512w\", \"/static/1f0e0afc788a4c4579cf54432f490479/ed529/kubernetes-traefik-ingress_03.webp 796w\"],\n    \"sizes\": \"(max-width: 796px) 100vw, 796px\",\n    \"type\": \"image/webp\"\n  })), \"\\n        \", mdx(\"source\", _extends({\n    parentName: \"picture\"\n  }, {\n    \"srcSet\": [\"/static/1f0e0afc788a4c4579cf54432f490479/b1806/kubernetes-traefik-ingress_03.png 256w\", \"/static/1f0e0afc788a4c4579cf54432f490479/7572d/kubernetes-traefik-ingress_03.png 512w\", \"/static/1f0e0afc788a4c4579cf54432f490479/57ec9/kubernetes-traefik-ingress_03.png 796w\"],\n    \"sizes\": \"(max-width: 796px) 100vw, 796px\",\n    \"type\": \"image/png\"\n  })), \"\\n        \", mdx(\"img\", _extends({\n    parentName: \"picture\"\n  }, {\n    \"className\": \"gatsby-resp-image-image\",\n    \"style\": {\n      \"width\": \"100%\",\n      \"height\": \"100%\",\n      \"margin\": \"0\",\n      \"verticalAlign\": \"middle\",\n      \"position\": \"absolute\",\n      \"top\": \"0\",\n      \"left\": \"0\",\n      \"boxShadow\": \"inset 0px 0px 0px 400px white\"\n    },\n    \"src\": \"/static/1f0e0afc788a4c4579cf54432f490479/57ec9/kubernetes-traefik-ingress_03.png\",\n    \"alt\": \"Traefik Ingress for your Kubernetes Cluster\",\n    \"title\": \"\"\n  })), \"\\n      \"), \"\\n  \")), mdx(\"h2\", {\n    \"id\": \"path-based-routing\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#path-based-routing\",\n    \"aria-label\": \"path based routing permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Path-based Routing\"), mdx(\"p\", null, \"First lets start by launching the pods for three websites. \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note\"), \": I am using 3 Node.js apps, that are more less build the way \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/express-generator-dockerrized/\"\n  }), \"described here\"), \" - that means they are Node.js/Express.js servers that host web content on a specific port. In my case those ports are \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"7777\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"7778\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"7779\"), \". They were uploaded to Dockerhub and can be accessed by referencing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"- image: your-docker-hub-account/your-docker-image-name-on-docker-hub\"), \":\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"app1.yaml\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), \"---\\nkind: Deployment\\napiVersion: extensions/v1beta1\\nmetadata:\\n  name: wiki-de\\n  labels:\\n    app: wiki-frontend\\nspec:\\n  replicas: 1\\n  selector:\\n    matchLabels:\\n      app: wiki-frontend\\n  template:\\n    metadata:\\n      labels:\\n        app: wiki-frontend\\n        version: v2.1.0\\n    spec:\\n      containers:\\n      - image: mpolinowski/my-docker-image:latest\\n        imagePullPolicy: Always\\n        name: wiki-de\\n        ports:\\n        - containerPort: 7779\\n      restartPolicy: Always\\n\\n---\\napiVersion: v1\\nkind: Service\\nmetadata:\\n  name: wiki-de\\nspec:\\n  ports:\\n  - name: http\\n    targetPort: 7779\\n    port: 7779\\n  selector:\\n    app: wiki-frontend\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"app2.yaml\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), \"---\\nkind: Deployment\\napiVersion: extensions/v1beta1\\nmetadata:\\n  name: wiki-en\\n  labels:\\n    app: wiki-frontend\\nspec:\\n  replicas: 1\\n  selector:\\n    matchLabels:\\n      app: wiki-frontend\\n  template:\\n    metadata:\\n      labels:\\n        app: wiki-frontend\\n        version: v2.1.0\\n    spec:\\n      containers:\\n      - image: mpolinowski/my-docker-image-en:latest\\n        imagePullPolicy: Always\\n        name: wiki-en\\n        ports:\\n        - containerPort: 7777\\n      restartPolicy: Always\\n\\n---\\napiVersion: v1\\nkind: Service\\nmetadata:\\n  name: wiki-en\\nspec:\\n  ports:\\n  - name: http\\n    targetPort: 7777\\n    port: 7777\\n  selector:\\n    app: wiki-frontend\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"app3.yaml\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), \"---\\nkind: Deployment\\napiVersion: extensions/v1beta1\\nmetadata:\\n  name: wiki-fr\\n  labels:\\n    app: wiki-frontend\\nspec:\\n  replicas: 1\\n  selector:\\n    matchLabels:\\n      app: wiki-frontend\\n  template:\\n    metadata:\\n      labels:\\n        app: wiki-frontend\\n        version: v2.1.0\\n    spec:\\n      containers:\\n      - image: mpolinowski/my-docker-image-fr:latest\\n        imagePullPolicy: Always\\n        name: wiki-frontend\\n        ports:\\n        - containerPort: 7778\\n      restartPolicy: Always\\n\\n---\\napiVersion: v1\\nkind: Service\\nmetadata:\\n  name: wiki-fr\\nspec:\\n  ports:\\n  - name: http\\n    targetPort: 7778\\n    port: 7778\\n  selector:\\n    app: wiki-frontend\\n\")), mdx(\"p\", null, \"Now we can submit an ingress for the 3 web apps:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), \"apiVersion: extensions/v1beta1\\nkind: Ingress\\nmetadata:\\n  name: wiki-frontend\\n  annotations:\\n    kubernetes.io/ingress.class: traefik\\n    traefik.frontend.rule.type: PathPrefixStrip\\nspec:\\n  rules:\\n  - host: my.domain.com\\n    http:\\n      paths:\\n      - path: /de\\n        backend:\\n          serviceName: wiki-de\\n          servicePort: http\\n      - path: /en\\n        backend:\\n          serviceName: wiki-en\\n          servicePort: http\\n      - path: /fr\\n        backend:\\n          serviceName: wiki-fr\\n          servicePort: http\\n\")), mdx(\"h2\", {\n    \"id\": \"user-authentication\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#user-authentication\",\n    \"aria-label\": \"user authentication permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"User Authentication\"), mdx(\"p\", null, \"It's possible to protect access to Traefik through basic authentication. See the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://docs.traefik.io/configuration/backends/kubernetes\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"Kubernetes Ingress\"), \" configuration page for syntactical details and restrictions.\"), mdx(\"h3\", {\n    \"id\": \"creating-the-secret\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#creating-the-secret\",\n    \"aria-label\": \"creating the secret permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Creating the Secret\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Use \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"htpasswd\"), \" to create a file containing the username and the MD5-encoded password (on Centos you might have to install it first \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"yum install -y httpd-tools\"), \"). You will be prompted for a password which you will have to enter twice:\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"htpasswd -c ./auth myusername\\n\")), mdx(\"ol\", {\n    \"start\": 2\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Now use \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"kubectl\"), \" to create a secret in the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"monitoring\"), \" namespace using the file created by \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"htpasswd\"), \":\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"kubectl create namespace monitoring\\nkubectl create secret generic mysecret --from-file auth --namespace=monitoring\\n\")), mdx(\"p\", null, \"You have to swap the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"kube-system\"), \" with the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"monitoring\"), \" namespace in the config files (see below)\"), mdx(\"ol\", {\n    \"start\": 3\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Attach the following annotations to the Ingress object:\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"traefik.ingress.kubernetes.io/auth-type: \\\"basic\\\"\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"traefik.ingress.kubernetes.io/auth-secret: \\\"mysecret\\\"\"))), mdx(\"p\", null, \"They specify basic authentication and reference the Secret \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mysecret\"), \" containing the credentials.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"HOW DO YOU CONFIGURE THE THE BASIC AUTHENTICATION? WIP\")), mdx(\"h2\", {\n    \"id\": \"add-a-tls-certificate-to-the-ingress\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#add-a-tls-certificate-to-the-ingress\",\n    \"aria-label\": \"add a tls certificate to the ingress permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Add a TLS Certificate to the Ingress\"), mdx(\"p\", null, \"To setup an HTTPS-protected ingress, you can leverage the TLS feature of the ingress resource:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), \"apiVersion: extensions/v1beta1\\nkind: Ingress\\nmetadata:\\n  name: traefik-web-ui\\n  namespace: monitoring\\n  annotations:\\n    traefik.ingress.kubernetes.io/auth-type: \\\"basic\\\"\\n    traefik.ingress.kubernetes.io/auth-secret: \\\"mysecret\\\"\\nspec:\\n  rules:\\n  - host: my.domain.com\\n    http:\\n      paths:\\n      - path: /\\n        backend:\\n          serviceName: traefik-web-ui\\n          servicePort: https\\n  tls:\\n   - secretName: traefik-ui-tls-cert\\n\")), mdx(\"p\", null, \"We now need to provide the TLS certificate via a Kubernetes secret in the same namespace as the ingress. The following two commands will generate a new certificate and create a secret containing the key and cert files:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout tls.key -out tls.crt -subj \\\"/CN=traefik-ui.minikube\\\"\\nkubectl -n kube-system create secret tls traefik-ui-tls-cert --key=tls.key --cert=tls.crt\\n\")), mdx(\"p\", null, \"Since I am already using fully qualified Domain - and I have used \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://certbot.eff.org/lets-encrypt/centosrhel7-other\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"Certbot\"), \" to generate an TLS certificate - I can use those files for my domain inside the ingress. \"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note\"), \": that the certificate that you generated with Certbot can be found in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/etc/letsencrypt/live/my.domain.com\"), \" - where \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"my.domain.com\"), \" is the domain you created the certificate for. Furthermore, Certbot generates a couple of \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"*.pem\"), \" files instead of a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"*.key\"), \" and \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"*.crt\"), \". In the kubectl command above use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"privkey.pem\"), \" as the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"key\"), \" file and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fullchain.pem\"), \" as your \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"crt\"), \" file (see \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://stackoverflow.com/questions/50389883/generate-crt-key-ssl-files-from-lets-encrypt-from-scratch\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"Stackoverflow\"), \" for details):\"), mdx(\"p\", null, mdx(\"span\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"gatsby-resp-image-wrapper\",\n    \"style\": {\n      \"position\": \"relative\",\n      \"display\": \"block\",\n      \"marginLeft\": \"auto\",\n      \"marginRight\": \"auto\",\n      \"maxWidth\": \"800px\"\n    }\n  }), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"gatsby-resp-image-background-image\",\n    \"style\": {\n      \"paddingBottom\": \"19.749999999999996%\",\n      \"position\": \"relative\",\n      \"bottom\": \"0\",\n      \"left\": \"0\",\n      \"backgroundSize\": \"cover\",\n      \"display\": \"block\"\n    }\n  })), \"\\n    \", mdx(\"picture\", {\n    parentName: \"span\"\n  }, \"\\n        \", mdx(\"source\", _extends({\n    parentName: \"picture\"\n  }, {\n    \"srcSet\": [\"/static/fcc27bba97126fa408a1af08ba2df6fc/8d3d1/kubernetes-traefik-ingress_04.webp 256w\", \"/static/fcc27bba97126fa408a1af08ba2df6fc/354cf/kubernetes-traefik-ingress_04.webp 512w\", \"/static/fcc27bba97126fa408a1af08ba2df6fc/47a22/kubernetes-traefik-ingress_04.webp 800w\"],\n    \"sizes\": \"(max-width: 800px) 100vw, 800px\",\n    \"type\": \"image/webp\"\n  })), \"\\n        \", mdx(\"source\", _extends({\n    parentName: \"picture\"\n  }, {\n    \"srcSet\": [\"/static/fcc27bba97126fa408a1af08ba2df6fc/b1806/kubernetes-traefik-ingress_04.png 256w\", \"/static/fcc27bba97126fa408a1af08ba2df6fc/7572d/kubernetes-traefik-ingress_04.png 512w\", \"/static/fcc27bba97126fa408a1af08ba2df6fc/368d4/kubernetes-traefik-ingress_04.png 800w\"],\n    \"sizes\": \"(max-width: 800px) 100vw, 800px\",\n    \"type\": \"image/png\"\n  })), \"\\n        \", mdx(\"img\", _extends({\n    parentName: \"picture\"\n  }, {\n    \"className\": \"gatsby-resp-image-image\",\n    \"style\": {\n      \"width\": \"100%\",\n      \"height\": \"100%\",\n      \"margin\": \"0\",\n      \"verticalAlign\": \"middle\",\n      \"position\": \"absolute\",\n      \"top\": \"0\",\n      \"left\": \"0\",\n      \"boxShadow\": \"inset 0px 0px 0px 400px white\"\n    },\n    \"src\": \"/static/fcc27bba97126fa408a1af08ba2df6fc/368d4/kubernetes-traefik-ingress_04.png\",\n    \"alt\": \"Traefik Ingress for your Kubernetes Cluster\",\n    \"title\": \"\"\n  })), \"\\n      \"), \"\\n  \")), mdx(\"p\", null, \"The resulting command will look something like this:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"kubectl -n kube-system create secret tls traefik-ui-tls-cert --key=/etc/letsencrypt/live/my.domain.com/privkey.pem --cert=/etc/letsencrypt/live/my.domain.com/fullchain.pem\\n\")), mdx(\"p\", null, \"You receive a reply \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"secret/traefik-ui-tls-cert created\"), \"!\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"HOW DO YOU CONFIGURE THE SERVICE FOR HTTPS? WIP\")), mdx(\"p\", null, \"You can add a TLS entrypoint by adding the following args to the container spec:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), \"--defaultentrypoints=http,https\\n--entrypoints=Name:https Address::443 TLS\\n--entrypoints=Name:http Address::80\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"traefik-deployment.yaml\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), \"---\\napiVersion: v1\\nkind: ServiceAccount\\nmetadata:\\n  name: traefik-ingress-controller\\n  namespace: monitoring\\n  annotations:\\n    traefik.ingress.kubernetes.io/auth-type: \\\"basic\\\"\\n    traefik.ingress.kubernetes.io/auth-secret: \\\"mysecret\\\"\\n  \\n---\\nkind: Deployment\\napiVersion: extensions/v1beta1\\nmetadata:\\n  name: traefik-ingress-controller\\n  namespace: monitoring\\n  annotations:\\n    traefik.ingress.kubernetes.io/auth-type: \\\"basic\\\"\\n    traefik.ingress.kubernetes.io/auth-secret: \\\"mysecret\\\"\\n  labels:\\n    k8s-app: traefik-ingress-lb\\nspec:\\n  replicas: 1\\n  selector:\\n    matchLabels:\\n      k8s-app: traefik-ingress-lb\\n  template:\\n    metadata:\\n      labels:\\n        k8s-app: traefik-ingress-lb\\n        name: traefik-ingress-lb\\n    spec:\\n      serviceAccountName: traefik-ingress-controller\\n      terminationGracePeriodSeconds: 60\\n      containers:\\n      - image: traefik\\n        name: traefik-ingress-lb\\n        ports:\\n        - name: http\\n          containerPort: 80\\n          hostPort: 8080\\n        - name: https\\n          containerPort: 443\\n          hostPort: 443\\n        - name: admin\\n          containerPort: 8080\\n        args:\\n        - --api\\n        - --kubernetes\\n        - --logLevel=INFO\\n        - --defaultentrypoints=https,http\\n        - --entrypoints=Name:https Address::443 TLS\\n        - --entrypoints=Name:http Address::80\\n        \\n---\\nkind: Service\\napiVersion: v1\\nmetadata:\\n  name: traefik-ingress-service\\n  namespace: monitoring\\n  annotations:\\n    traefik.ingress.kubernetes.io/auth-type: \\\"basic\\\"\\n    traefik.ingress.kubernetes.io/auth-secret: \\\"mysecret\\\"\\nspec:\\n  selector:\\n    k8s-app: traefik-ingress-lb\\n  ports:\\n    - protocol: TCP\\n      port: 80\\n      name: http\\n    - protocol: TCP\\n      port: 443\\n      name: https\\n    - protocol: TCP\\n      port: 8080\\n      name: admin\\n  type: NodePort\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ui.yaml\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), \"---\\napiVersion: v1\\nkind: Service\\nmetadata:\\n  name: traefik-web-ui\\n  namespace: monitoring\\n  annotations:\\n    traefik.ingress.kubernetes.io/auth-type: \\\"basic\\\"\\n    traefik.ingress.kubernetes.io/auth-secret: \\\"mysecret\\\"\\nspec:\\n  selector:\\n    k8s-app: traefik-ingress-lb\\n  ports:\\n  - name: http\\n    port: 80\\n    targetPort: 8080\\n  - name: https\\n    protocol: TCP\\n    port: 443\\n    targetPort: 443\\n  externalIPs:\\n    - 172.56.4.112\\n---\\napiVersion: extensions/v1beta1\\nkind: Ingress\\nmetadata:\\n  name: traefik-web-ui\\n  namespace: monitoring\\n  annotations:\\n    traefik.ingress.kubernetes.io/auth-type: \\\"basic\\\"\\n    traefik.ingress.kubernetes.io/auth-secret: \\\"mysecret\\\"\\nspec:\\n  rules:\\n  - host: my.domain.com\\n    http:\\n      paths:\\n      - path: /\\n        backend:\\n          serviceName: traefik-web-ui\\n          servicePort: https\\n  tls:\\n   - secretName: traefik-ui-tls-cert\\n\")), mdx(\"h2\", {\n    \"id\": \"name-based-routing\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#name-based-routing\",\n    \"aria-label\": \"name based routing permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Name-based Routing\"));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"Getting Started with the Traefik Reverse Proxy Prerequisites Deploy Traefik using a Deployment or DaemonSet Submitting an Ingress to the…","frontmatter":{"title":"Kubernetes Traefik Ingress","date":"02/01/2019","categories":["LINUX","Docker","Kubernetes"]},"timeToRead":4,"parent":{"mtime":"2019-07-07T14:27:14.503Z","birthtime":"2019-07-07T14:26:26.203Z"}}},"pageContext":{"slug":"/kubernetes-traefik-ingress","prev":{"fields":{"slug":"/kubernetes-the-chinese-way"},"frontmatter":{"title":"Kubernetes the Chinese Way","categories":["LINUX","Docker","Kubernetes"]}},"next":{"fields":{"slug":"/nginx-ingress-with-cert-manager"},"frontmatter":{"title":"NGINX Ingress with Cert-Manager","categories":["LINUX","Docker","Kubernetes","NGINX"]}}}}}