{"componentChunkName":"component---src-templates-post-js","path":"/server-rendering-with-react-and-react-router","webpackCompilationHash":"8316f175ee1e107602e9","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"date\": \"2018-01-17\",\n  \"title\": \"Server Rendering with React and React Router\",\n  \"categories\": [\"Javascript\", \"React\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"span\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"gatsby-resp-image-wrapper\",\n    \"style\": {\n      \"position\": \"relative\",\n      \"display\": \"block\",\n      \"marginLeft\": \"auto\",\n      \"marginRight\": \"auto\",\n      \"maxWidth\": \"1024px\"\n    }\n  }), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"gatsby-resp-image-background-image\",\n    \"style\": {\n      \"paddingBottom\": \"46.733333333333334%\",\n      \"position\": \"relative\",\n      \"bottom\": \"0px\",\n      \"left\": \"0px\",\n      \"backgroundSize\": \"cover\",\n      \"display\": \"block\"\n    }\n  })), \"\\n    \", mdx(\"picture\", {\n    parentName: \"span\"\n  }, \"\\n        \", mdx(\"source\", _extends({\n    parentName: \"picture\"\n  }, {\n    \"srcSet\": [\"/static/b44cd2b6b49002ffcfaef01179bb583c/a9925/photo-11627973773_7295195845_o.webp 256w\", \"/static/b44cd2b6b49002ffcfaef01179bb583c/5406f/photo-11627973773_7295195845_o.webp 512w\", \"/static/b44cd2b6b49002ffcfaef01179bb583c/ae385/photo-11627973773_7295195845_o.webp 1024w\", \"/static/b44cd2b6b49002ffcfaef01179bb583c/2cd02/photo-11627973773_7295195845_o.webp 1500w\"],\n    \"sizes\": \"(max-width: 1024px) 100vw, 1024px\",\n    \"type\": \"image/webp\"\n  })), \"\\n        \", mdx(\"source\", _extends({\n    parentName: \"picture\"\n  }, {\n    \"srcSet\": [\"/static/b44cd2b6b49002ffcfaef01179bb583c/2c438/photo-11627973773_7295195845_o.png 256w\", \"/static/b44cd2b6b49002ffcfaef01179bb583c/53eb4/photo-11627973773_7295195845_o.png 512w\", \"/static/b44cd2b6b49002ffcfaef01179bb583c/e0e05/photo-11627973773_7295195845_o.png 1024w\", \"/static/b44cd2b6b49002ffcfaef01179bb583c/10439/photo-11627973773_7295195845_o.png 1500w\"],\n    \"sizes\": \"(max-width: 1024px) 100vw, 1024px\",\n    \"type\": \"image/png\"\n  })), \"\\n        \", mdx(\"img\", _extends({\n    parentName: \"picture\"\n  }, {\n    \"className\": \"gatsby-resp-image-image\",\n    \"style\": {\n      \"width\": \"100%\",\n      \"height\": \"100%\",\n      \"margin\": \"0px\",\n      \"verticalAlign\": \"middle\",\n      \"position\": \"absolute\",\n      \"top\": \"0px\",\n      \"left\": \"0px\",\n      \"boxShadow\": \"inset 0px 0px 0px 400px white\"\n    },\n    \"src\": \"/static/b44cd2b6b49002ffcfaef01179bb583c/e0e05/photo-11627973773_7295195845_o.png\",\n    \"alt\": \"Angkor, Cambodia\",\n    \"title\": \"\"\n  })), \"\\n      \"), \"\\n  \")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Server side rendering a React app can provide a few different benefits including performance and SEO. The problem is with those benefits comes a cost of additional complexity to your application. In this project, we'll start from scratch and slowly build a server side rendered React 16.3 with React Router 4.\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#01-setup-webpack-3\"\n  }), \"01 Setup Webpack 3\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#02-hello-world\"\n  }), \"02 Hello World\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#03-rehydration\"\n  }), \"03 Rehydration\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#04-data-fetch-api\"\n  }), \"04 Data Fetch Api\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#05-react-router\"\n  }), \"05 React Router\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#server-side\"\n  }), \"Server Side\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#client-side\"\n  }), \"Client Side\"))))), mdx(\"h2\", {\n    \"id\": \"01-setup-webpack-3\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#01-setup-webpack-3\",\n    \"aria-label\": \"01 setup webpack 3 permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"01 Setup Webpack 3\"), mdx(\"p\", null, \"When accessing our app, we first want to be presented with a static HTML scaffold of our app, that loads immediately. This static layout will be re-hydrated by the actual react app, in form of an embedded \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"bundle.js\"), \" file. This file can become quite big and might take a while to download - the static HTML is going to help us bridging the load time, before react kicks into action.\"), mdx(\"p\", null, \"This way there are two render cases that we have to handle inside webpack - on our server and inside the clients browser. To accomplish this we need to add two configs - browserConfig and serverConfig to our ./webpack.config.js file.\"), mdx(\"p\", null, \"The following dependencies need to be \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"npm installed\"), \"  and required in our Webpack Config:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"var path = require('path')\\nvar webpack = require('webpack')\\nvar nodeExternals = require('webpack-node-externals')\\n\")), mdx(\"p\", null, \"Client Side Rendering Case:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"var browserConfig = {\\n  entry: './src/browser/index.js',\\n  output: {\\n    path: path.resolve(__dirname, 'public'),\\n    filename: 'bundle.js',\\n    publicPath: '/'\\n  },\\n  module: {\\n    rules: [{\\n      test: /\\\\.(js)$/,\\n      use: 'babel-loader'\\n    }, ]\\n  },\\n  plugins: [\\n    new webpack.DefinePlugin({\\n      __isBrowser__: \\\"true\\\"\\n    })\\n  ]\\n}\\n\")), mdx(\"p\", null, \"Webpack is going to take a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"./src/browser/index.js\"), \" file, and - with the help of Babel - bundle everything into a big / browser-readable javascript file in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"./public\"), \". Make sure to install the following Babel components for this to work:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"npm install babel-core babel-loader babel-plugin-transform-object-rest-spread babel-preset-env babel-preset-react\\n\")), mdx(\"p\", null, \"And configure babel to use the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"react\"), \" and \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"env\"), \" preset inside your ./package.json file:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"\\\"babel\\\": {\\n    \\\"presets\\\": [\\n      \\\"env\\\",\\n      \\\"react\\\"\\n    ],\\n    \\\"plugins\\\": [\\n      \\\"transform-object-rest-spread\\\"\\n    ]\\n  },\\n\")), mdx(\"p\", null, \"Server Side Rendering Case:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"var serverConfig = {\\n  entry: './src/server/index.js',\\n  target: 'node',\\n  externals: [nodeExternals()],\\n  output: {\\n    path: __dirname,\\n    filename: 'server.js',\\n    publicPath: '/'\\n  },\\n  module: {\\n    rules: [{\\n      test: /\\\\.(js)$/,\\n      use: 'babel-loader'\\n    }]\\n  },\\n  plugins: [\\n    new webpack.DefinePlugin({\\n      __isBrowser__: \\\"false\\\"\\n    })\\n  ]\\n}\\n\")), mdx(\"p\", null, \"When \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"isBrowser\"), \" is set to false, Webpack will use the serverConfig, grabs the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"./src/server/index.js\"), \", targets \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"node\"), \" and babel-transpiles / bundles everything up inside \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"server.js\"), \" in the root directory. The \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"externals\"), \" line only states, that our \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"node-modules\"), \" are not bundled up as well.\"), mdx(\"h2\", {\n    \"id\": \"02-hello-world\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#02-hello-world\",\n    \"aria-label\": \"02 hello world permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"02 Hello World\"), mdx(\"p\", null, \"Now we need to create the files that we defined in our Webpack Config. Lets create a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"./src\"), \" folder and add \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"./src/browser\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"./src/server\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"./src/shared\"), \". The last one will contain code, that is shared between the server and client side rendered file.\"), mdx(\"p\", null, \"First, lets:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"npm install react react-dom\\n\")), mdx(\"p\", null, \"Then get started with an Hello World, add an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"./src/shared/app.js\"), \" file with our primary react component:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"import React, {Component} from 'react'\\n\\nclass App extends Component {\\n  render() {\\n    return (\\n      <div>\\n        Hello World\\n      </div>\\n    )\\n  }\\n}\\n\")), mdx(\"p\", null, \"Inside \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"./src/server/index.js\"), \" we want to create an \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://expressjs.com\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"Express.js\"), \" webserver for our app. first \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"npm install express cors\"), \", import them and create an Express App that is listening on port 3000, serving the content of our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"./public\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import express from 'express'\\nimport cors from 'cors'\\n\\nconst app = express()\\n\\nconst port = 3000\\n\\napp.use(cors())\\n\\napp.use(express.static('public'))\\n\\napp.listen(port, () => {\\n  console.log('Express Server listening on port: '+ port)\\n})\\n\")), mdx(\"p\", null, \"To make Express serve our Hello World component, we can use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"render-to-string\"), \" method from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"react-dom\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"...\\n\\nimport React from 'react'\\nimport { renderToString } from 'react-dom/server'\\nimport App from '../shared/App'\\n\\n...\\n\\napp.get('*', (req, res, next) => {\\n  const markup = renderToString(\\n    <App />\\n  ) //Create HTML Markup from App React Component\\n\\n  res.send(`\\n    <!DOCTYPE html>\\n    <html>\\n      <head>\\n        <title>Server Rendering with React and React Router</title>\\n        <script src='/bundle.js' defer></script>\\n      </head>\\n\\n      <body>\\n        <div id=\\\"app\\\">${markup}</div>\\n      </body>\\n    </html>\\n  `) //Wrap Markup inside HTML site and send to client and link to generated bundle.js\\n})\\n\")), mdx(\"p\", null, \"To test our app, lets install \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://nodemon.io\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"Nodemon\"), \" (it will catch changes we make to the code and automatically restart the server, when necessary) and add a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"npm start script\"), \" inside the package.json that allow us to run both npm scripts - the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"develop script\"), \" that starts Webpack and the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"watch script\"), \" - in parallel with our start script:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"\\\"scripts\\\": {\\n    \\\"start\\\": \\\"npm run develop | npm run watch\\\",\\n    \\\"develop\\\": \\\"webpack --watch\\\",\\n    \\\"watch\\\": \\\"nodemon server.js\\\",\\n    \\\"test\\\": \\\"echo \\\\\\\"Error: no test specified\\\\\\\" && exit 1\\\"\\n  },\\n\")), mdx(\"p\", null, \"A proposed alternative to piping both commands together, is using \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.npmjs.com/package/npm-run-all\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"npm-run-all\"), \" (another would have been \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.npmjs.com/package/concurrently\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"concurrently\"), \", which has to be installed as a dev dependency:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"\\\"scripts\\\": {\\n\\\"start\\\": \\\"npm-run-all --parallel develop watch\\\",\\n\\\"develop\\\": \\\"webpack -w\\\",\\n\\\"watch\\\": \\\"nodemon server.js\\\",\\n\\\"test\\\": \\\"echo \\\\\\\"Error: no test specified\\\\\\\" && exit 1\\\"\\n}\\n\")), mdx(\"p\", null, \"We can now \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"npm start\"), \" both components of the app server and see our Hello World by accessing \", mdx(\"em\", {\n    parentName: \"p\"\n  }, mdx(\"a\", _extends({\n    parentName: \"em\"\n  }, {\n    \"href\": \"http://localhost:3000\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"http://localhost:3000\")), \" with a web browser.\"), mdx(\"h2\", {\n    \"id\": \"03-rehydration\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#03-rehydration\",\n    \"aria-label\": \"03 rehydration permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"03 Rehydration\"), mdx(\"p\", null, \"We now have the server-side rendered part of our app. The next step is to build the client-side part - and rehydrate the static HTML with React, once the Javascript bundle is loaded. To visualize the process, let's add some data to our App React Component:\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"./src/shared/app.js\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"class App extends Component {\\n  render(data) {\\n    return (\\n      <div>\\n        Hello {this.props.data}\\n      </div>\\n    )\\n  }\\n}\\n\")), mdx(\"p\", null, \"Now we can call our app with data in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"./src/server/index.js\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"app.get('*', (req, res, next) => {\\n  const markup = renderToString(\\n    <App data='World' />\\n  )\\n\")), mdx(\"p\", null, \"This is going to display our old \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Hello World\"), \". By calling the component with a data string in the client side version of our app, we will be able to see the Rehydration in process:\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"./src/browser/index.js\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from 'react'\\nimport { hydrate } from 'react-dom'\\nimport App from '../shared/App'\\n\\nhydrate (\\n  <App data='You' />,\\n  document.getElementById('app')\\n)\\n\")), mdx(\"p\", null, \"This process will search for the Element ID 'app' inside our server-side rendered HTML and replace (rehydrate) the Element with corresponding, fully functional React Component. Since we are passing in different Data (World / You), we will be able to see, when the rehydration process succeeded - which on localhost is of course very fast:\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"./ssrrr_01.gif\",\n    \"alt\": \"React Rehydration\"\n  }))), mdx(\"p\", null, \"But taking a look at your Browser Console tells you, that React is not happy about the mismatch - it expects the rendered content to be identical between the server and the client!\"), mdx(\"p\", null, mdx(\"span\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"gatsby-resp-image-wrapper\",\n    \"style\": {\n      \"position\": \"relative\",\n      \"display\": \"block\",\n      \"marginLeft\": \"auto\",\n      \"marginRight\": \"auto\",\n      \"maxWidth\": \"590px\"\n    }\n  }), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"gatsby-resp-image-background-image\",\n    \"style\": {\n      \"paddingBottom\": \"19.152542372881356%\",\n      \"position\": \"relative\",\n      \"bottom\": \"0px\",\n      \"left\": \"0px\",\n      \"backgroundSize\": \"cover\",\n      \"display\": \"block\"\n    }\n  })), \"\\n    \", mdx(\"picture\", {\n    parentName: \"span\"\n  }, \"\\n        \", mdx(\"source\", _extends({\n    parentName: \"picture\"\n  }, {\n    \"srcSet\": [\"/static/ab8dd633238e44f850f9f7dca56f52cd/a9925/ssrrr_02.webp 256w\", \"/static/ab8dd633238e44f850f9f7dca56f52cd/5406f/ssrrr_02.webp 512w\", \"/static/ab8dd633238e44f850f9f7dca56f52cd/d97b3/ssrrr_02.webp 590w\"],\n    \"sizes\": \"(max-width: 590px) 100vw, 590px\",\n    \"type\": \"image/webp\"\n  })), \"\\n        \", mdx(\"source\", _extends({\n    parentName: \"picture\"\n  }, {\n    \"srcSet\": [\"/static/ab8dd633238e44f850f9f7dca56f52cd/2c438/ssrrr_02.png 256w\", \"/static/ab8dd633238e44f850f9f7dca56f52cd/53eb4/ssrrr_02.png 512w\", \"/static/ab8dd633238e44f850f9f7dca56f52cd/e1e83/ssrrr_02.png 590w\"],\n    \"sizes\": \"(max-width: 590px) 100vw, 590px\",\n    \"type\": \"image/png\"\n  })), \"\\n        \", mdx(\"img\", _extends({\n    parentName: \"picture\"\n  }, {\n    \"className\": \"gatsby-resp-image-image\",\n    \"style\": {\n      \"width\": \"100%\",\n      \"height\": \"100%\",\n      \"margin\": \"0px\",\n      \"verticalAlign\": \"middle\",\n      \"position\": \"absolute\",\n      \"top\": \"0px\",\n      \"left\": \"0px\",\n      \"boxShadow\": \"inset 0px 0px 0px 400px white\"\n    },\n    \"src\": \"/static/ab8dd633238e44f850f9f7dca56f52cd/e1e83/ssrrr_02.png\",\n    \"alt\": \"React Rehydration\",\n    \"title\": \"\"\n  })), \"\\n      \"), \"\\n  \")), mdx(\"p\", null, \"To make sure that the data is always the same on both sides, we can only hardcode (you need to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"npm install serialize-javascript\"), \") it to the server side and pass it to the window object from there:\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"./src/server/index.js\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"...\\n\\nimport serialize from 'serialize-javascript'\\n\\n...\\n\\napp.get('*', (req, res, next) => {\\n  const world = 'World'\\n  const markup = renderToString(\\n    <App data={world} />\\n  )\\n\\n  res.send(`\\n    <!DOCTYPE html>\\n    <html>\\n      <head>\\n        <title>Server Rendering with React and React Router</title>\\n        <script src='/bundle.js' defer></script>\\n        <script>window.__INITIAL_DATA__ = ${serialize(world)}</script>\\n      </head>\\n\\n      <body>\\n        <div id=\\\"app\\\">${markup}</div>\\n      </body>\\n    </html>\\n  `)\\n})\\n\")), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"./src/browser/index.js\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"hydrate (\\n  <App data={window.__INITIAL_DATA__} />,\\n  document.getElementById('app')\\n)\\n\")), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"./ssrrr_03.gif\",\n    \"alt\": \"React Rehydration\"\n  }))), mdx(\"p\", null, \"Now the server rendered version will have the hardcoded data, and the client side can pick it up from \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"_\", \"_\", \"INITIAL\", \"_\", \"DATA\", \"_\", \"_\")), mdx(\"h2\", {\n    \"id\": \"04-data-fetch-api\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#04-data-fetch-api\",\n    \"aria-label\": \"04 data fetch api permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"04 Data Fetch Api\"), mdx(\"p\", null, \"To make our app a little bit more useful, lets - instead of using hardcoded strings - fetch some Data from the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://developer.github.com/v3/\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"Github API\"), \". We create a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"./src/shared/api.js\"), \" file and add the necessary fetch api AJAX request (you need to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"npm install isomorphic-fetch\"), \") to retrieve a JSON response with the most beloved repositories from different programming languages:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import fetch from 'isomorphic-fetch'\\n\\nexport function fetchPopularRepos(language = 'all') {\\n  const encodedURI = encodeURI(`https://api.github.com/search/repositories?q=stars:>1+language:${language}&sort=stars&order=desc&type=Repositories`)\\n\\n  return fetch(encodedURI)\\n    .then((data) => data.json())\\n    .then((repos) => repos.items)\\n    .catch((error) => {\\n      console.warn(error)\\n      return null\\n    });\\n}\\n\")), mdx(\"p\", null, \"To add this data to our server rendered HTML, we first need to import it:\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"./src/server/index.js\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import { fetchPopularRepos } from '../shared/api'\\n\")), mdx(\"p\", null, \"And then pass the data response to the render function:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"app.get('*', (req, res, next) => {\\n  fetchPopularRepos()\\n  .then((data) => {\\n    const markup = renderToString(\\n      <App data={data} />\\n    )\\n\\n    res.send(`\\n    <!DOCTYPE html>\\n    <html>\\n      <head>\\n        <title>Server Rendering with React and React Router</title>\\n        <script src='/bundle.js' defer></script>\\n        <script>window.__INITIAL_DATA__ = ${serialize(data)}</script>\\n      </head>\\n\\n      <body>\\n        <div id=\\\"app\\\">${markup}</div>\\n      </body>\\n    </html>\\n  `)\\n  })\\n})\\n\")), mdx(\"p\", null, \"To make the API response a little bit more readable, lets create a Grid component that will be imported to our \\\\<App/\", \">\", \" component.\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"./shared/grid.js\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"import React, { Component } from 'react'\\n\\nclass Grid extends Component {\\n  render() {\\n    const repos = this.props.data\\n\\n    return (\\n      <ul style={{ display: 'flex', flexWrap: 'wrap' }}>\\n        {repos.map(({ name, owner, stargazers_count, html_url }) => (\\n          <li key={name} style={{ margin: 30 }}>\\n            <ul>\\n              <li><a href={html_url}>{name}</a></li>\\n              <li>@{owner.login}</li>\\n              <li>{stargazers_count} stars</li>\\n            </ul>\\n          </li>\\n        ))}\\n      </ul>\\n    )\\n  }\\n}\\n\\nexport default Grid\\n\")), mdx(\"p\", null, \"Since we already passed down the data from our API call to the \\\\<App/\", \">\", \" component, we can now pass it further down to our new \\\\<Grid/\", \">\", \" component:\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"./src/shared/app.js\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"import Grid from './grid'\\n\\nclass App extends Component {\\n  render(data) {\\n    return (\\n      <div>\\n        <Grid data={this.props.data} />\\n      </div>\\n    )\\n  }\\n}\\n\")), mdx(\"p\", null, \"The Github API call is now populating the Grid inside our App component. Opening \", mdx(\"em\", {\n    parentName: \"p\"\n  }, mdx(\"a\", _extends({\n    parentName: \"em\"\n  }, {\n    \"href\": \"http://localhost:3000\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"http://localhost:3000\")), \" inside your browser will show you a list of the most popular github repositories for all programming languages:\"), mdx(\"p\", null, mdx(\"span\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"gatsby-resp-image-wrapper\",\n    \"style\": {\n      \"position\": \"relative\",\n      \"display\": \"block\",\n      \"marginLeft\": \"auto\",\n      \"marginRight\": \"auto\",\n      \"maxWidth\": \"627px\"\n    }\n  }), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"gatsby-resp-image-background-image\",\n    \"style\": {\n      \"paddingBottom\": \"37.16108452950559%\",\n      \"position\": \"relative\",\n      \"bottom\": \"0px\",\n      \"left\": \"0px\",\n      \"backgroundSize\": \"cover\",\n      \"display\": \"block\"\n    }\n  })), \"\\n    \", mdx(\"picture\", {\n    parentName: \"span\"\n  }, \"\\n        \", mdx(\"source\", _extends({\n    parentName: \"picture\"\n  }, {\n    \"srcSet\": [\"/static/1e58efd3b97fe81d19d747e06f771b25/a9925/ssrrr_04.webp 256w\", \"/static/1e58efd3b97fe81d19d747e06f771b25/5406f/ssrrr_04.webp 512w\", \"/static/1e58efd3b97fe81d19d747e06f771b25/d4c6a/ssrrr_04.webp 627w\"],\n    \"sizes\": \"(max-width: 627px) 100vw, 627px\",\n    \"type\": \"image/webp\"\n  })), \"\\n        \", mdx(\"source\", _extends({\n    parentName: \"picture\"\n  }, {\n    \"srcSet\": [\"/static/1e58efd3b97fe81d19d747e06f771b25/2c438/ssrrr_04.png 256w\", \"/static/1e58efd3b97fe81d19d747e06f771b25/53eb4/ssrrr_04.png 512w\", \"/static/1e58efd3b97fe81d19d747e06f771b25/77fdb/ssrrr_04.png 627w\"],\n    \"sizes\": \"(max-width: 627px) 100vw, 627px\",\n    \"type\": \"image/png\"\n  })), \"\\n        \", mdx(\"img\", _extends({\n    parentName: \"picture\"\n  }, {\n    \"className\": \"gatsby-resp-image-image\",\n    \"style\": {\n      \"width\": \"100%\",\n      \"height\": \"100%\",\n      \"margin\": \"0px\",\n      \"verticalAlign\": \"middle\",\n      \"position\": \"absolute\",\n      \"top\": \"0px\",\n      \"left\": \"0px\",\n      \"boxShadow\": \"inset 0px 0px 0px 400px white\"\n    },\n    \"src\": \"/static/1e58efd3b97fe81d19d747e06f771b25/77fdb/ssrrr_04.png\",\n    \"alt\": \"Popular Repositories on Github\",\n    \"title\": \"\"\n  })), \"\\n      \"), \"\\n  \")), mdx(\"h2\", {\n    \"id\": \"05-react-router\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#05-react-router\",\n    \"aria-label\": \"05 react router permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"05 React Router\"), mdx(\"h3\", {\n    \"id\": \"server-side\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#server-side\",\n    \"aria-label\": \"server side permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Server Side\"), mdx(\"p\", null, \"Now we want to add some routes to our app, using \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/ReactTraining/react-router\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"React Router\"), \". We will have to use a shared route config for server and client side navigation. We will add this central route configuration file in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"./src/shared/routes.js\"), \" :\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import Home from './home'\\nimport Grid from './grid'\\n\\nconst routes = [\\n  {\\n    path: '/',\\n    exact: 'true',\\n    component: Home,\\n  },\\n  {\\n    path: '/popular/:id',\\n    component: Grid,\\n  }\\n]\\n\")), mdx(\"p\", null, \"The App will have 2 available routes - the root page and the page that will render the Github API response. Lets quickly add a scaffolding for the \\\\<Home \\\\/\", \">\", \" component, that will later let you choose the language, you want to see popular repositories for:\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"./src/shared/home.js\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"import React from 'react'\\n\\nexport default function Home () {\\n  return (\\n    <div>\\n      Select a language\\n    </div>\\n  )\\n}\\n\")), mdx(\"p\", null, \"To enable our server to pre-render each page, we have to add every data request that a route needs into the central route object \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"./src/shared/routes.js\"), \" :\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import { fetchPopularRepos } from './api'\\n\\n...\\n\\n{\\n  path: '/popular/:id',\\n  component: Grid,\\n  fetchInitialData: (path = '') => fetchPopularRepos(path.split('/').pop())\\n}\\n\")), mdx(\"p\", null, \"The user will be able to choose the programming language he is interested in inside the \\\\<Home \\\\/\", \">\", \" component and will navigate to the specific route \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/popular/${language}\"), \". The initialData for the server rendered page will be take from the Github API call with the chosen language from the URL path.\"), mdx(\"p\", null, \"Now we need to make the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"./src/server/index.js\"), \" aware what route the user chose, so that correct content will be pre-rendered. We can do this with the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"matchPath\"), \" method, provided by react-router-dom:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"import { matchPath } from 'react-router-dom'\\nimport routes from '../shared/routes'\\n\\n...\\n\\napp.get('*', (req, res, next) => { //when app receives a GET request...\\n  const activeRoute = routes.find((route) => matchPath(req.url, route)) || {} //find out what route matches the requested URL...\\n\\n  fetchPopularRepos()\\n  .then((data) => {\\n    const markup = renderToString(\\n      <App data={data} />\\n    )\\n\\n...\\n\")), mdx(\"p\", null, \"To find the active route, compare the requested URL with the route Object (imported from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"./src/shared/routes/\"), \"), if no match is found, set the active route to an empty object.\"), mdx(\"p\", null, \"We can now handle the fetching of Initial data with a promise and remove the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"fetchPopularRepos\"), \" API call (as it is now handled inside the central route object):\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"// import { fetchPopularRepos } from '../shared/api' //REMOVE\\n\\n...\\n\\napp.get('*', (req, res, next) => { //when app receives a GET request...\\n  const activeRoute = routes.find((route) => matchPath(req.url, route)) || {} //find out what route matches the requested URL...\\n\\n  const promise = activeRoute.fetchInitialData //find out if the route needs to fetch data\\n    ? activeRoute.fetchInitialData(req.path) //if so, fetch the data for the active route\\n    : Promise.resolve() //if no data is needed (home route), just resolve\\n\\n    promise.then((data) => { //when everything is fetched, render the app markup with the with {data}\\n      const markup = renderToString(\\n        <App data={data} />\\n      )\\n\\n    res.send(`\\n    <html>\\n    ...\\n    </html>\\n  `) //and send the static HTML page to client\\n  }).catch(next) //if there are any errors, move on to the next request\\n})\\n...\\n\")), mdx(\"p\", null, \"You can test the routing by opening a valid URL that follows our requirement \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"path:'/popular/:id'\"), \", e.g. \", mdx(\"em\", {\n    parentName: \"p\"\n  }, mdx(\"a\", _extends({\n    parentName: \"em\"\n  }, {\n    \"href\": \"http://localhost:3000/popular/javascript\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"http://localhost:3000/popular/javascript\"))), mdx(\"p\", null, mdx(\"span\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"gatsby-resp-image-wrapper\",\n    \"style\": {\n      \"position\": \"relative\",\n      \"display\": \"block\",\n      \"marginLeft\": \"auto\",\n      \"marginRight\": \"auto\",\n      \"maxWidth\": \"621px\"\n    }\n  }), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"gatsby-resp-image-background-image\",\n    \"style\": {\n      \"paddingBottom\": \"64.573268921095%\",\n      \"position\": \"relative\",\n      \"bottom\": \"0px\",\n      \"left\": \"0px\",\n      \"backgroundSize\": \"cover\",\n      \"display\": \"block\"\n    }\n  })), \"\\n    \", mdx(\"picture\", {\n    parentName: \"span\"\n  }, \"\\n        \", mdx(\"source\", _extends({\n    parentName: \"picture\"\n  }, {\n    \"srcSet\": [\"/static/30459cbc55c3d91d261c1481456ac5ec/a9925/ssrrr_05.webp 256w\", \"/static/30459cbc55c3d91d261c1481456ac5ec/5406f/ssrrr_05.webp 512w\", \"/static/30459cbc55c3d91d261c1481456ac5ec/5fff0/ssrrr_05.webp 621w\"],\n    \"sizes\": \"(max-width: 621px) 100vw, 621px\",\n    \"type\": \"image/webp\"\n  })), \"\\n        \", mdx(\"source\", _extends({\n    parentName: \"picture\"\n  }, {\n    \"srcSet\": [\"/static/30459cbc55c3d91d261c1481456ac5ec/2c438/ssrrr_05.png 256w\", \"/static/30459cbc55c3d91d261c1481456ac5ec/53eb4/ssrrr_05.png 512w\", \"/static/30459cbc55c3d91d261c1481456ac5ec/929ce/ssrrr_05.png 621w\"],\n    \"sizes\": \"(max-width: 621px) 100vw, 621px\",\n    \"type\": \"image/png\"\n  })), \"\\n        \", mdx(\"img\", _extends({\n    parentName: \"picture\"\n  }, {\n    \"className\": \"gatsby-resp-image-image\",\n    \"style\": {\n      \"width\": \"100%\",\n      \"height\": \"100%\",\n      \"margin\": \"0px\",\n      \"verticalAlign\": \"middle\",\n      \"position\": \"absolute\",\n      \"top\": \"0px\",\n      \"left\": \"0px\",\n      \"boxShadow\": \"inset 0px 0px 0px 400px white\"\n    },\n    \"src\": \"/static/30459cbc55c3d91d261c1481456ac5ec/929ce/ssrrr_05.png\",\n    \"alt\": \"Popular Javascript Repositories on Github\",\n    \"title\": \"\"\n  })), \"\\n      \"), \"\\n  \")), mdx(\"p\", null, \"The Router matches the URL, fetches the corresponding data from the Github API and provides it to the Grid component that is rendered and send to the client.\"), mdx(\"h3\", {\n    \"id\": \"client-side\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#client-side\",\n    \"aria-label\": \"client side permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Client Side\"), mdx(\"p\", null, \"Now we have to add the client side routing. First, we wrap the \\\\<App \\\\/\", \">\", \" component \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"./src/browser/index.js\"), \" inside a \\\\<BrowserRouter \\\\/\", \">\", \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"import React from 'react'\\nimport { hydrate } from 'react-dom'\\nimport { BrowserRouter } from 'react-router-dom'\\n\\nimport App from '../shared/App'\\n\\nhydrate(\\n  <BrowserRouter>\\n    <App data={window.__INITIAL_DATA__} />\\n  </BrowserRouter>,\\n  document.getElementById('app')\\n)\\n\")), mdx(\"p\", null, \"And use the \\\\<StaticRouter \\\\/\", \">\", \" for the server side render:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"import { matchPath, StaticRouter } from 'react-router-dom'\\n\\n...\\n\\npromise.then((data) => {\\n      const markup = renderToString(\\n        <StaticRouter location='req.url' context={{}}>\\n          <App data={data} />\\n        </StaticRouter>\\n      )\\n\")), mdx(\"p\", null, \"The \\\\<App \\\\/\", \">\", \" component in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"./src/shared/app.js\"), \" now no longer needs to render the \\\\<Grid \\\\/\", \">\", \" but will receive \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"import React, { Component } from 'react'\\nimport routes from './routes'\\nimport { Route } from 'react-router-dom'\\n\\nclass App extends Component {\\n  render(data) {\\n    return (\\n      <div>\\n        {routes.map(({ path, exact, component: C, ...rest }) => (\\n          <Route\\n            key={path}\\n            path={path}\\n            exact={exact}\\n            render={(props) => (\\n              <C {...props} {...rest} />\\n            )}\\n          />\\n        ))}\\n      </div>\\n    )\\n  }\\n}\\n\\nexport default App\\n\")));\n}\nMDXContent.isMDXComponent = true;","excerpt":"Server side rendering a React app can provide a few different benefits including performance and SEO. The problem is with those benefits…","frontmatter":{"title":"Server Rendering with React and React Router","date":"01/17/2018","categories":["Javascript","React"]},"timeToRead":5,"parent":{"__typename":"File","mtime":"2019-07-07T12:19:21.679Z","birthtime":"2019-07-07T12:18:06.420Z"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/server-rendering-with-react-and-react-router","prev":{"fields":{"slug":"/react-transition-group"},"frontmatter":{"title":"react-transition-group","categories":["Javascript","React"]}},"next":{"fields":{"slug":"/run-your-node-js-app-from-a-docker-container"},"frontmatter":{"title":"Run your Node.js app from a Docker Container","categories":["Javascript","Node","Docker"]}}}}}