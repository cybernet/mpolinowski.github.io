{"componentChunkName":"component---src-templates-post-jsx","path":"/python-network-logger","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"date\": \"2017-12-17\",\n  \"title\": \"Python Network Logger\",\n  \"categories\": [\"Python\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"span\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"gatsby-resp-image-wrapper\",\n    \"style\": {\n      \"position\": \"relative\",\n      \"display\": \"block\",\n      \"marginLeft\": \"auto\",\n      \"marginRight\": \"auto\",\n      \"maxWidth\": \"1024px\"\n    }\n  }), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"gatsby-resp-image-background-image\",\n    \"style\": {\n      \"paddingBottom\": \"40.2%\",\n      \"position\": \"relative\",\n      \"bottom\": \"0\",\n      \"left\": \"0\",\n      \"backgroundSize\": \"cover\",\n      \"display\": \"block\"\n    }\n  })), \"\\n    \", mdx(\"picture\", {\n    parentName: \"span\"\n  }, \"\\n        \", mdx(\"source\", _extends({\n    parentName: \"picture\"\n  }, {\n    \"srcSet\": [\"/static/daa34d4a53664e9953e350cbc744e08f/8d3d1/photo-33vfghg3253_sd5767gw324d90_o.webp 256w\", \"/static/daa34d4a53664e9953e350cbc744e08f/354cf/photo-33vfghg3253_sd5767gw324d90_o.webp 512w\", \"/static/daa34d4a53664e9953e350cbc744e08f/44907/photo-33vfghg3253_sd5767gw324d90_o.webp 1024w\", \"/static/daa34d4a53664e9953e350cbc744e08f/9579c/photo-33vfghg3253_sd5767gw324d90_o.webp 1500w\"],\n    \"sizes\": \"(max-width: 1024px) 100vw, 1024px\",\n    \"type\": \"image/webp\"\n  })), \"\\n        \", mdx(\"source\", _extends({\n    parentName: \"picture\"\n  }, {\n    \"srcSet\": [\"/static/daa34d4a53664e9953e350cbc744e08f/b1806/photo-33vfghg3253_sd5767gw324d90_o.png 256w\", \"/static/daa34d4a53664e9953e350cbc744e08f/7572d/photo-33vfghg3253_sd5767gw324d90_o.png 512w\", \"/static/daa34d4a53664e9953e350cbc744e08f/9e490/photo-33vfghg3253_sd5767gw324d90_o.png 1024w\", \"/static/daa34d4a53664e9953e350cbc744e08f/33a69/photo-33vfghg3253_sd5767gw324d90_o.png 1500w\"],\n    \"sizes\": \"(max-width: 1024px) 100vw, 1024px\",\n    \"type\": \"image/png\"\n  })), \"\\n        \", mdx(\"img\", _extends({\n    parentName: \"picture\"\n  }, {\n    \"className\": \"gatsby-resp-image-image\",\n    \"style\": {\n      \"width\": \"100%\",\n      \"height\": \"100%\",\n      \"margin\": \"0\",\n      \"verticalAlign\": \"middle\",\n      \"position\": \"absolute\",\n      \"top\": \"0\",\n      \"left\": \"0\",\n      \"boxShadow\": \"inset 0px 0px 0px 400px white\"\n    },\n    \"src\": \"/static/daa34d4a53664e9953e350cbc744e08f/9e490/photo-33vfghg3253_sd5767gw324d90_o.png\",\n    \"alt\": \"Harbin, China\",\n    \"title\": \"\"\n  })), \"\\n      \"), \"\\n  \")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#python-ssh-logger\"\n  }), \"Python SSH Logger\"))), mdx(\"h1\", {\n    \"id\": \"python-ssh-logger\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h1\"\n  }, {\n    \"href\": \"#python-ssh-logger\",\n    \"aria-label\": \"python ssh logger permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Python SSH Logger\"), mdx(\"p\", null, \"We want to build a small python program that allows us to log server states over the network by SSH. We start with creating 3 environment files that hold the server ip address, the SSH user login and the commands that we have to send to the server to get the information:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"./serverip.env\"\n  }), \"serverip.env\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"./userlogin.env\"\n  }), \"userlogin.env\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"./commands.env\"\n  }), \"commands.env\"))), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/mpolinowski/python-ssh-logger/blob/master/ip_file_valid.py\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"ip_file_valid.py\"), \" : Ask for \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"serverip.env\"), \" file location and read IP address\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/mpolinowski/python-ssh-logger/blob/master/ip_addr_valid.py\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"ip_addr_valid.py\"), \" : Check if Server IP is a valid IP and does not belong to a restricted range.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/mpolinowski/python-ssh-logger/blob/master/ip_reach.py\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"ip_reach.py\"), \" : Check if IP address can be pinged,\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/mpolinowski/python-ssh-logger/blob/master/ssh_connect.py\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"ssh_connect.py\"), \" : Verify \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"userlogin.env\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"commands.env\"), \" and use \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Paramiko\"), \" to connect to your server and send commands via SSHv2.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/mpolinowski/python-ssh-logger/blob/master/create_threads.py\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"create_threads.py\"), \" create parallel threads for each SSH connection (only useful if you contact more than 1 server at once)\")), mdx(\"p\", null, \"The command I want to use is the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"top -n 1\"), \" that will give me an overview over the server load:\"), mdx(\"p\", null, mdx(\"span\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"gatsby-resp-image-wrapper\",\n    \"style\": {\n      \"position\": \"relative\",\n      \"display\": \"block\",\n      \"marginLeft\": \"auto\",\n      \"marginRight\": \"auto\",\n      \"maxWidth\": \"800px\"\n    }\n  }), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"gatsby-resp-image-background-image\",\n    \"style\": {\n      \"paddingBottom\": \"26.75%\",\n      \"position\": \"relative\",\n      \"bottom\": \"0\",\n      \"left\": \"0\",\n      \"backgroundSize\": \"cover\",\n      \"display\": \"block\"\n    }\n  })), \"\\n    \", mdx(\"picture\", {\n    parentName: \"span\"\n  }, \"\\n        \", mdx(\"source\", _extends({\n    parentName: \"picture\"\n  }, {\n    \"srcSet\": [\"/static/3fe5dd65d973a4df7dfa1073311184a2/8d3d1/python-network-logger_01.webp 256w\", \"/static/3fe5dd65d973a4df7dfa1073311184a2/354cf/python-network-logger_01.webp 512w\", \"/static/3fe5dd65d973a4df7dfa1073311184a2/47a22/python-network-logger_01.webp 800w\"],\n    \"sizes\": \"(max-width: 800px) 100vw, 800px\",\n    \"type\": \"image/webp\"\n  })), \"\\n        \", mdx(\"source\", _extends({\n    parentName: \"picture\"\n  }, {\n    \"srcSet\": [\"/static/3fe5dd65d973a4df7dfa1073311184a2/b1806/python-network-logger_01.png 256w\", \"/static/3fe5dd65d973a4df7dfa1073311184a2/7572d/python-network-logger_01.png 512w\", \"/static/3fe5dd65d973a4df7dfa1073311184a2/368d4/python-network-logger_01.png 800w\"],\n    \"sizes\": \"(max-width: 800px) 100vw, 800px\",\n    \"type\": \"image/png\"\n  })), \"\\n        \", mdx(\"img\", _extends({\n    parentName: \"picture\"\n  }, {\n    \"className\": \"gatsby-resp-image-image\",\n    \"style\": {\n      \"width\": \"100%\",\n      \"height\": \"100%\",\n      \"margin\": \"0\",\n      \"verticalAlign\": \"middle\",\n      \"position\": \"absolute\",\n      \"top\": \"0\",\n      \"left\": \"0\",\n      \"boxShadow\": \"inset 0px 0px 0px 400px white\"\n    },\n    \"src\": \"/static/3fe5dd65d973a4df7dfa1073311184a2/368d4/python-network-logger_01.png\",\n    \"alt\": \"Python Network Logger\",\n    \"title\": \"\"\n  })), \"\\n      \"), \"\\n  \")), mdx(\"p\", null, \"To extract the CPU load from the server reply, I am going to use the following regular expression - not that we cannot prepend our RegEx with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"r\"), \" to get the RAW string, but have to use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"b\"), \" to handle the response that Python calls \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"byte-like\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"# Searching for the CPU utilization value within the output of \\\"show processes top once\\\"\\ncpu = re.search(b\\\"(%Cpu\\\\(s\\\\): ) (.+?)(us)\\\", server_response)\\n# cpu = server_response\\n\\n# Extracting the second group, which matches the actual value of the CPU utilization and decoding to the UTF-8 format from the binary data type\\nutilization = cpu.group(2).decode(\\\"utf-8\\\")\\n# utilization = cpu.decode(\\\"utf-8\\\")\\n\\n# Printing the CPU utilization value to the screen\\n# print(utilization)\\n\\n# Opening the CPU utilization text file and appending the results\\nwith open(\\\"E:\\\\\\\\python-ssh-logger\\\\\\\\cpu-load.txt\\\", \\\"a\\\") as f:\\n    # f.write(\\\"{},{}\\\\n\\\".format(str(datetime.datetime.now()), utilization))\\n    f.write(utilization + \\\"\\\\n\\\")\\n\")), mdx(\"p\", null, \"A good way to develop a fitting regular expression for your task is to test it on \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://regex101.com/\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"regex101.com\"), \":\"), mdx(\"p\", null, mdx(\"span\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"gatsby-resp-image-wrapper\",\n    \"style\": {\n      \"position\": \"relative\",\n      \"display\": \"block\",\n      \"marginLeft\": \"auto\",\n      \"marginRight\": \"auto\",\n      \"maxWidth\": \"800px\"\n    }\n  }), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"gatsby-resp-image-background-image\",\n    \"style\": {\n      \"paddingBottom\": \"56.25%\",\n      \"position\": \"relative\",\n      \"bottom\": \"0\",\n      \"left\": \"0\",\n      \"backgroundSize\": \"cover\",\n      \"display\": \"block\"\n    }\n  })), \"\\n    \", mdx(\"picture\", {\n    parentName: \"span\"\n  }, \"\\n        \", mdx(\"source\", _extends({\n    parentName: \"picture\"\n  }, {\n    \"srcSet\": [\"/static/80a9383dcf03c6a5d16229005f885720/8d3d1/python-network-logger_02.webp 256w\", \"/static/80a9383dcf03c6a5d16229005f885720/354cf/python-network-logger_02.webp 512w\", \"/static/80a9383dcf03c6a5d16229005f885720/47a22/python-network-logger_02.webp 800w\"],\n    \"sizes\": \"(max-width: 800px) 100vw, 800px\",\n    \"type\": \"image/webp\"\n  })), \"\\n        \", mdx(\"source\", _extends({\n    parentName: \"picture\"\n  }, {\n    \"srcSet\": [\"/static/80a9383dcf03c6a5d16229005f885720/b1806/python-network-logger_02.png 256w\", \"/static/80a9383dcf03c6a5d16229005f885720/7572d/python-network-logger_02.png 512w\", \"/static/80a9383dcf03c6a5d16229005f885720/368d4/python-network-logger_02.png 800w\"],\n    \"sizes\": \"(max-width: 800px) 100vw, 800px\",\n    \"type\": \"image/png\"\n  })), \"\\n        \", mdx(\"img\", _extends({\n    parentName: \"picture\"\n  }, {\n    \"className\": \"gatsby-resp-image-image\",\n    \"style\": {\n      \"width\": \"100%\",\n      \"height\": \"100%\",\n      \"margin\": \"0\",\n      \"verticalAlign\": \"middle\",\n      \"position\": \"absolute\",\n      \"top\": \"0\",\n      \"left\": \"0\",\n      \"boxShadow\": \"inset 0px 0px 0px 400px white\"\n    },\n    \"src\": \"/static/80a9383dcf03c6a5d16229005f885720/368d4/python-network-logger_02.png\",\n    \"alt\": \"Python Network Logger\",\n    \"title\": \"\"\n  })), \"\\n      \"), \"\\n  \")), mdx(\"p\", null, \"Once the txt file with the CPU utilization is created, we can use \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://matplotlib.org\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"matplotlib\"), \" to plot the results in \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/mpolinowski/python-ssh-logger/blob/master/graph.py\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"graph.py\"), \" (You might have to install the library first \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"python -m pip install matplotlib\"), \").\"), mdx(\"p\", null, \"Running both programs parallel shows us the real-time CPU utilization of our server:\"), mdx(\"p\", null, mdx(\"span\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"gatsby-resp-image-wrapper\",\n    \"style\": {\n      \"position\": \"relative\",\n      \"display\": \"block\",\n      \"marginLeft\": \"auto\",\n      \"marginRight\": \"auto\",\n      \"maxWidth\": \"800px\"\n    }\n  }), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"gatsby-resp-image-background-image\",\n    \"style\": {\n      \"paddingBottom\": \"75.75%\",\n      \"position\": \"relative\",\n      \"bottom\": \"0\",\n      \"left\": \"0\",\n      \"backgroundSize\": \"cover\",\n      \"display\": \"block\"\n    }\n  })), \"\\n    \", mdx(\"picture\", {\n    parentName: \"span\"\n  }, \"\\n        \", mdx(\"source\", _extends({\n    parentName: \"picture\"\n  }, {\n    \"srcSet\": [\"/static/7c8221a6ab883a8cf828d031f16ec294/8d3d1/python-network-logger_03.webp 256w\", \"/static/7c8221a6ab883a8cf828d031f16ec294/354cf/python-network-logger_03.webp 512w\", \"/static/7c8221a6ab883a8cf828d031f16ec294/47a22/python-network-logger_03.webp 800w\"],\n    \"sizes\": \"(max-width: 800px) 100vw, 800px\",\n    \"type\": \"image/webp\"\n  })), \"\\n        \", mdx(\"source\", _extends({\n    parentName: \"picture\"\n  }, {\n    \"srcSet\": [\"/static/7c8221a6ab883a8cf828d031f16ec294/b1806/python-network-logger_03.png 256w\", \"/static/7c8221a6ab883a8cf828d031f16ec294/7572d/python-network-logger_03.png 512w\", \"/static/7c8221a6ab883a8cf828d031f16ec294/368d4/python-network-logger_03.png 800w\"],\n    \"sizes\": \"(max-width: 800px) 100vw, 800px\",\n    \"type\": \"image/png\"\n  })), \"\\n        \", mdx(\"img\", _extends({\n    parentName: \"picture\"\n  }, {\n    \"className\": \"gatsby-resp-image-image\",\n    \"style\": {\n      \"width\": \"100%\",\n      \"height\": \"100%\",\n      \"margin\": \"0\",\n      \"verticalAlign\": \"middle\",\n      \"position\": \"absolute\",\n      \"top\": \"0\",\n      \"left\": \"0\",\n      \"boxShadow\": \"inset 0px 0px 0px 400px white\"\n    },\n    \"src\": \"/static/7c8221a6ab883a8cf828d031f16ec294/368d4/python-network-logger_03.png\",\n    \"alt\": \"Python Network Logger\",\n    \"title\": \"\"\n  })), \"\\n      \"), \"\\n  \")));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"Python SSH Logger Python SSH Logger We want to build a small python program that allows us to log server states over the network by SSH. We…","frontmatter":{"title":"Python Network Logger","date":"12/17/2017","categories":["Python"]},"timeToRead":1,"parent":{"mtime":"2019-07-07T11:59:23.121Z","birthtime":"2019-07-07T11:54:31.766Z"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/python-network-logger","prev":{"fields":{"slug":"/gatsby-js-with-bootstrap-4"},"frontmatter":{"title":"Gatsby.js with Bootstrap 4","categories":["Javascript","React","Gatsby","Bootstrap"]}},"next":{"fields":{"slug":"/umlaute"},"frontmatter":{"title":"Umlaute","categories":["Windows"]}}}}}